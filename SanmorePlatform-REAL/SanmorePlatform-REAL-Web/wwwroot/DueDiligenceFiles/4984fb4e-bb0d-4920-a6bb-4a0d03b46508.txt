 public class Property
    {
        [Key]
        public int PropertyId { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
        public decimal? Latitude { get; set; }
        public decimal? Longitude { get; set; }
       // public PropertyType PropertyType { get; set; }
        public string? ImageName { get; set; }
      //  public int StudentId { get; set; }


    }
public class PropertyModel
    {     
        public string? Title { get; set; }
        public string? Description { get; set; }
        public decimal? Latitude { get; set; }
        public decimal? Longitude { get; set; }
       // public PropertyType PropertyType { get; set; }
       // [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ImageName { get; set; }    
        public List<IFormFile>? FileName { get; set; }
      //  public Student? Student { get; set; }
     //   public EmployeeModel Employee { get; set; }

    }
  public async Task<int> AddPropertyAsync(PropertyModel propertyModel)
        {
            List<string> imagePaths = new List<string>();

            if (propertyModel.FileName != null)
            {
            //    var identityFile = Guid.NewGuid().ToString() + Path.GetExtension(propertyModel.FileName.FileName);
            //    var identityPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "PropertyImages", identityFile);
            //    var identityDirectory = Path.GetDirectoryName(identityPath);
            //    if (!Directory.Exists(identityDirectory))
            //    {
            //        Directory.CreateDirectory(identityDirectory);
            //    }
            //    using (var stream = new FileStream(identityPath, FileMode.Create))
            //    {
            //        await propertyModel.FileName.CopyToAsync(stream);
            //    }
                foreach (var file in propertyModel.FileName)
                {
                    var imageName = Guid.NewGuid().ToString() + Path.GetExtension(file.FileName);
                    var imagePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "PropertyImages", imageName);
                    var imageDirectory = Path.GetDirectoryName(imagePath);

                    if (!Directory.Exists(imageDirectory))
                    {
                        Directory.CreateDirectory(imageDirectory);
                    }

                    using (var stream = new FileStream(imagePath, FileMode.Create))
                    {
                        await file.CopyToAsync(stream);
                    }
                    var property = new Property()
                    {
                        Title = propertyModel.Title,
                        Description = propertyModel.Description,
                        Latitude = propertyModel.Latitude,
                        Longitude = propertyModel.Longitude,
                        ImageName = imageName,
                        // StudentId=student.StudentId,
                    };
                    _context.Properties.Add(property);
                    return property.PropertyId;

                    //   imagePaths.Add(imagePath);
                }


            }
            return 1;

            //// Save employee data into the database
            //var student = new Entity.Student()
            //{
            //    SName = propertyModel.Student?.SName,
            //    SSection = propertyModel.Student?.SSection,
            //};

            //_context.Student.Add(student);
            //await _context.SaveChangesAsync();
            //save property data into database

            //await _context.SaveChangesAsync();
            //var employee = new Employee()
            //{
            //    Name = propertyModel.Employee.Name,
            //    Age = propertyModel.Employee.Age,
            //    PropertyId = property.PropertyId,
            //};

            //_context.Employees.Add(employee);
            //await _context.SaveChangesAsync();
        }


      =================================
  [HttpPost("AddProperty")]
        public async Task<IActionResult> AddProperty(PropertyModel propertyModel)
        {
            if (!ModelState.IsValid)
            {
                return Ok(new { Message = "Error accured while adding property" });
            }
            else
            {
                var id = await _service.AddPropertyAsync(propertyModel);
                return Ok(new { Message = "Successfully added" });
            }

        }
      =========================================
consume

==============================
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Property Form</title>
</head>
<body>

    <form id="propertyForm" method="post" enctype="multipart/form-data">
        <label for="title">Title:</label>
        <input type="text" id="title" name="Title">

        <br>

        <label for="description">Description:</label>
        <textarea id="description" name="Description"></textarea>

        <br>

        <label for="latitude">Latitude:</label>
        <input type="text" id="latitude" name="Latitude">

        <br>

        <label for="longitude">Longitude:</label>
        <input type="text" id="longitude" name="Longitude">

        <br>

        <label for="imageName">Image Name:</label>
        <input type="text" id="imageName" name="ImageName">

        <br>

        <label for="file">File:</label>
        <input type="file" id="files" name="FileName" multiple>

        <br>

        <input type="submit" onclick="AddProperty();" value="Submit">
    </form>

</body>
</html>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>

<script src="~/js/index.js"></script>


=======================================
$(document).ready(function () {
    alert("Ok");
})
debugger;
function AddProperty() {
    var formData = new FormData();

    formData.append('Title', $('#title').val());
    formData.append('Description', $('#description').val());
    formData.append('Latitude', $('#latitude').val());
    formData.append('Longitude', $('#longitude').val());
    formData.append('ImageName', $('#imageName').val());
   // formData.append('FileName', $('#file')[0].files[0]);
    // Handle multiple file uploads
    var filesInput = document.getElementById('files');
    for (var i = 0; i < filesInput.files.length; i++) {
        formData.append('FileName', filesInput.files[i]);
    }


    $.ajax({
        url: '/Home/AddProperty',  // Update with your server endpoint
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (response) {
            // Handle success
            console.log(response);
        },
        error: function (error) {
            // Handle error
            console.error(error);
        }
    });
}
====================================
 [HttpGet]
        public IActionResult AddProperty()
        {
            return View();
        }

        [HttpPost]
        public JsonResult AddProperty(PropertyModel model)
        {
            string data = JsonConvert.SerializeObject(model);
            StringContent content = new StringContent(data, Encoding.UTF8, "application/json");
            HttpResponseMessage responce = _client.PostAsync(_client.BaseAddress + "/Property/AddProperty", content).Result;
            if (responce.IsSuccessStatusCode)
            {
                return Json("Success");
            }
            List<PropertyModel> list = new List<PropertyModel>();
            return Json("Ok");
        }










